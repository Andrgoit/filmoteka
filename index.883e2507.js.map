{"mappings":"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","sources":["src/index.js","src/js/api-service.js"],"sourcesContent":["import ApiService from './js/api-service';\nconst newApiService = new ApiService();\n\n//  == refs ==\nconst refs = {\n  form: document.querySelector('.search-form'),\n  gallery: document.querySelector('.gallery-list'),\n  modalWindow: document.querySelector('.backdrop'),\n};\n\n// console.log(refs.modalWindow);\n\n//   == listeners ==\nrefs.form.addEventListener('submit', inputHandler);\n\n//  == First Load Page ==\nfirstPageLoader();\n\nfunction firstPageLoader() {\n  window.addEventListener('DOMContentLoaded', getTrendingMovie);\n}\n\nasync function getTrendingMovie() {\n  newApiService.resetPage();\n  try {\n    const response = await newApiService.fetchTrendingUrl();\n    const responseGenres = await newApiService.fetchGenres();\n    // console.log(response);\n    markupMovies(response, responseGenres);\n    refs.gallery.addEventListener('click', galleryListListener);\n  } catch (error) {\n    console.log(error);\n  }\n}\n//  == // First Load Page ==\n\nfunction markupMovies(response, responseGenres) {\n  const arrGenres = responseGenres.genres;\n  const imageUrl = 'https://image.tmdb.org/t/p/';\n  const imageSize = 'w500';\n  const movies = response.results;\n\n  // console.log(response.results);\n  // console.log(arrGenres);\n\n  const markup = movies\n    .map(\n      ({\n        id,\n        genre_ids,\n        original_title,\n        release_date,\n        poster_path,\n        vote_average,\n      }) => {\n        let genresArray = arrGenres\n          .filter(genre => genre_ids.includes(genre.id))\n          .map(genre => genre.name);\n        let date = new Date(release_date);\n        let year = date.getFullYear();\n        let vote = vote_average.toFixed(1);\n        return `<li class=\"gallery-item\" data-id=\"${id}\">\n        <div class=\"gallery-image\"><img src=\"${imageUrl}${imageSize}${poster_path}\" alt=\"${original_title}\">\n        <h2 class=\"gallery-item-title\">${original_title}</h2>\n        <span class=\"gallery-item-prop\">${genresArray} | ${year} | ${vote}</span></div></li>`;\n      }\n    )\n    .join('');\n\n  refs.gallery.innerHTML = markup;\n\n  // addGalleryItemListener();\n}\n\nasync function inputHandler(e) {\n  e.preventDefault();\n  refs.gallery.innerHTML = '';\n  newApiService.input = e.currentTarget.elements.searchInput.value.trim();\n  // console.log(newApiService.input);\n  // newApiService.resetPage();\n  if (newApiService.input !== '') {\n    try {\n      const response = await newApiService.fetchSearch();\n      const responseGenres = await newApiService.fetchGenres();\n      // console.log(response);\n      markupMovies(response, responseGenres);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  return;\n}\n\nfunction galleryListListener(e) {\n  e.preventDefault();\n  refs.modalWindow.classList.remove('backdrop--hidden');\n\n  // console.log(e.target);\n\n  const target = e.target;\n  newApiService.id = target.closest('.gallery-item').dataset.id;\n  // console.log('IdElement', newApiService.id);\n  getMovieById();\n}\n\nasync function getMovieById() {\n  try {\n    const response = await newApiService.fetchMovieById();\n    // console.log(response);\n    markupModalWindowByMovie(response);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction markupModalWindowByMovie(response) {\n  newApiService.obj = response;\n  console.log(newApiService.obj);\n  const imageUrl = 'https://image.tmdb.org/t/p/';\n  const imageSize = 'w500';\n  const {\n    genres,\n    original_title,\n    poster_path,\n    vote_average,\n    vote_count,\n    popularity,\n    overview,\n  } = response;\n  let genresArray = genres.map(genre => genre.name);\n  let vote = vote_average.toFixed(1);\n  let popular = popularity.toFixed(1);\n  const markupModalWindow = `<div class=\"card-modal\">\n    <button type=\"button\" data-action=\"modal-close\" class=\"modal-close\">\n      <img\n        class=\"modal-close__icon\"\n        src=\"./images/card-modal-img/modal-btn-close.svg\"\n        alt=\"cross\"\n        width=\"30\"\n        height=\"30\"\n      />\n    </button>\n    <div class=\"card-modal__container\">\n      <div class=\"card-modal__img\">\n        <picture>\n          <source\n            srcset=\"\n              ${imageUrl}${imageSize}${poster_path} 1x,\n              ${imageUrl}${imageSize}${poster_path} 2x\n            \"\n            media=\"(min-width: 1200px)\"\n          />\n          <source\n            srcset=\"\n              ${imageUrl}${imageSize}${poster_path} 1x,\n              ${imageUrl}${imageSize}${poster_path} 2x\n            \"\n            media=\"(min-width: 768px)\"\n          />\n          <source\n            srcset=\"\n              ${imageUrl}${imageSize}${poster_path} 1x,\n              ${imageUrl}${imageSize}${poster_path} 2x\n            \"\n            media=\"(min-width: 320px)\"\n          />\n          <img src=\"${imageUrl}${imageSize}${poster_path}\" alt=\"film\" />\n        </picture>\n      </div>\n      <div class=\"modal-meta\">\n        <h2 class=\"modal-heading\">${original_title}</h2>\n        <div class=\"meta-container\">\n          <ul class=\"list feature__list\">\n            <li class=\"feature__item\">\n              <span class=\"meta__feature\">Vote / Votes</span>\n            </li>\n            <li class=\"feature__item\">\n              <span class=\"meta__feature\">Popularity</span>\n            </li>\n            <li class=\"feature__item\">\n              <span class=\"meta__feature\">Original Title</span>\n            </li>\n            <li class=\"feature__item\">\n              <span class=\"meta__feature\">Genre</span>\n            </li>\n          </ul>\n          <ul class=\"list value__list\">\n            <li class=\"value__item\">\n              <div>\n                <span class=\"vote-votes\">${vote}</span> /\n                <span class=\"vote-votes\">${vote_count}</span>\n              </div>\n            </li>\n            <li class=\"value__item\">\n              <span class=\"meta__value\">${popular}</span>\n            </li>\n            <li class=\"value__item\">\n              <span class=\"meta__value\">${original_title}</span>\n            </li>\n            <li class=\"value__item\">\n              <span class=\"meta__value\">${genresArray}</span>\n            </li>\n          </ul>\n        </div>\n        <h3 class=\"modal-meta__title\">About</h3>\n        <p class=\"modal-meta__discription\">${overview}</p>\n        <ul class=\"list modal-btn__list\">\n          <li class=\"modal-btn__item\">\n            <button class=\"modal-btn\" data-action=\"watched\" type=\"button\">add to watched</button>\n          </li>\n          <li class=\"modal-btn__item\">\n            <button class=\"modal-btn\" data-action=\"queue\" type=\"button\">add to queue</button>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>`;\n  refs.modalWindow.innerHTML = markupModalWindow;\n  addModalWindowListeners();\n}\n\nfunction addModalWindowListeners() {\n  const closeModalWindow = document.querySelector(\n    '[data-action=\"modal-close\"]'\n  );\n  closeModalWindow.addEventListener('click', () => {\n    refs.modalWindow.classList.add('backdrop--hidden');\n    refs.modalWindow.innerHTML = '';\n  });\n\n  const addToWatchedBtn = document.querySelector('[data-action=\"watched\"]');\n  addToWatchedBtn.addEventListener('click', addWatchedToLocalStorage);\n\n  const addToQueueBtn = document.querySelector('[data-action=\"queue\"]');\n  addToQueueBtn.addEventListener('click', addQueueToLocalStorage);\n}\n\nfunction addWatchedToLocalStorage() {\n  const watchedFromStorage = localStorage.getItem('watched');\n\n  try {\n    const list = watchedFromStorage ? JSON.parse(watchedFromStorage) : [];\n    list.push(newApiService.obj);\n    const updateList = JSON.stringify(list);\n    localStorage.setItem('watched', updateList);\n  } catch (error) {\n    console.log('localStorage parsing error');\n  }\n}\n\nfunction addQueueToLocalStorage() {\n  const watchedFromStorage = localStorage.getItem('queue');\n\n  try {\n    const list = watchedFromStorage ? JSON.parse(watchedFromStorage) : [];\n    list.push(newApiService.obj);\n    const updateList = JSON.stringify(list);\n    localStorage.setItem('queue', updateList);\n  } catch (error) {\n    console.log('localStorage parsing error');\n  }\n}\n\nfunction readWatchedFromStorage() {\n  const watchedFromStorage = localStorage.getItem('watched');\n  try {\n    const savedWatched = JSON.parse(watchedFromStorage);\n    markupSavedMovie(savedWatched);\n  } catch (error) {\n    console.log('error readWatchedFromStorage');\n  }\n}\n\nfunction readQueueFromStorage() {\n  const watchedFromStorage = localStorage.getItem('queue');\n  try {\n    const savedWatched = JSON.parse(watchedFromStorage);\n    markupSavedMovie(savedWatched);\n  } catch (error) {\n    console.log('error readQueueFromStorage');\n  }\n}\n\nfunction markupSavedMovie(savedWatched) {\n  const imageUrl = 'https://image.tmdb.org/t/p/';\n  const imageSize = 'w500';\n\n  const markup = savedWatched\n    .map(({ genres, original_title, poster_path, vote_average }) => {\n      let genresArray = genres.map(genre => genre.name);\n      let vote = vote_average.toFixed(1);\n\n      return `<li class=\"gallery-item\" data-id=\"${id}\">\n        <div class=\"gallery-image\"><img src=\"${imageUrl}${imageSize}${poster_path}\" alt=\"${original_title}\">\n        <h2 class=\"gallery-item-title\">${original_title}</h2>\n        <span class=\"gallery-item-prop\">${genresArray} | ${year} | ${vote}</span></div></li>`;\n    })\n    .join('');\n}\n","const API_KEY = '83cba2c85d0df477852b094af9fbdddb';\n\nexport default class ApiService {\n  constructor() {\n    this.searchValue = '';\n    this.page = 1;\n    this.idMovie = '';\n    this.objForLocalStorage = {};\n  }\n\n  async fetchTrendingUrl() {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}&page=${this.page}`\n    );\n\n    this.incrementPage();\n\n    return await response.json();\n  }\n\n  async fetchSearch() {\n    // this.resetPage();\n    console.log(this.searchValue);\n    const response = await fetch(\n      `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${this.searchValue}&page=${this.page}`\n    );\n    console.log();\n    this.incrementPage();\n    console.log(response);\n    return await response.json();\n  }\n\n  async fetchGenres() {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/genre/movie/list?api_key=${API_KEY}&language=en-US`\n    );\n    // console.log('fetchGenres', response);\n    return await response.json();\n  }\n\n  // id подставлен статически временно 453395\n  async fetchMovieById() {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/movie/${this.idMovie}?api_key=${API_KEY}`\n    );\n    return await response.json();\n  }\n  incrementPage() {\n    this.page += 1;\n  }\n  resetPage() {\n    this.page = 1;\n  }\n\n  get input() {\n    return this.searchValue;\n  }\n  set input(newSearchValue) {\n    this.searchValue = newSearchValue;\n  }\n\n  get id() {\n    return this.idMovie;\n  }\n\n  set id(newIdMovie) {\n    this.idMovie = newIdMovie;\n  }\n\n  get obj() {\n    return this.objForLocalStorage;\n  }\n  set obj(newObj) {\n    this.objForLocalStorage = newObj;\n  }\n}\n"],"names":["$1f0dc3b9307be026$var$newApiService","async","response","fetch","this","page","incrementPage","json","console","log","searchValue","idMovie","resetPage","input","newSearchValue","id","newIdMovie","obj","objForLocalStorage","newObj","constructor","$1f0dc3b9307be026$var$refs","form","document","querySelector","gallery","modalWindow","$1f0dc3b9307be026$var$getTrendingMovie","fetchTrendingUrl","$1f0dc3b9307be026$var$markupMovies","fetchGenres","addEventListener","$1f0dc3b9307be026$var$galleryListListener","error","responseGenres","arrGenres","genres","markup","results","map","genre_ids","original_title","release_date","poster_path","vote_average","filter","genre","includes","name","Date","getFullYear","toFixed","join","innerHTML","e","preventDefault","classList","remove","target","closest","dataset","imageUrl","imageSize","vote_count","popularity","overview","genresArray","vote","popular","markupModalWindow","add","$1f0dc3b9307be026$var$addWatchedToLocalStorage","$1f0dc3b9307be026$var$addQueueToLocalStorage","$1f0dc3b9307be026$var$addModalWindowListeners","$1f0dc3b9307be026$var$markupModalWindowByMovie","fetchMovieById","$1f0dc3b9307be026$var$getMovieById","watchedFromStorage","localStorage","getItem","list","JSON","parse","push","updateList","stringify","setItem","currentTarget","elements","searchInput","value","trim","fetchSearch","window"],"version":3,"file":"index.883e2507.js.map"}